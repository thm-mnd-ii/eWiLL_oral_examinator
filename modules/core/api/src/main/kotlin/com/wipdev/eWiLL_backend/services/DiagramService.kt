package com.wipdev.eWiLL_backend.services

import com.wipdev.eWiLL_backend.database.tables.Diagram
import com.wipdev.eWiLL_backend.database.tables.DiagramConfig
import com.wipdev.eWiLL_backend.endpoints.payload.requests.Connection
import com.wipdev.eWiLL_backend.endpoints.payload.requests.DiagramPL
import com.wipdev.eWiLL_backend.endpoints.payload.requests.Entity
import com.wipdev.eWiLL_backend.repository.DiagramConfigRepository
import com.wipdev.eWiLL_backend.repository.DiagramRepository
import com.wipdev.eWiLL_backend.services.serviceInterfaces.IDiagramService
import io.swagger.v3.core.util.Json
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional

@Service
class DiagramService : IDiagramService {

    @Autowired
    private lateinit var diagramRepository: DiagramRepository

    @Autowired
    private lateinit var diagramHistoryService: DiagramHistoryService

    @Autowired
    private lateinit var diagramConfigRepository: DiagramConfigRepository
    override fun getAllDiagramPL(): List<DiagramPL> {
        return diagramRepository.findAll().map { convert(it, diagramConfigRepository) }
    }

    override fun getById(id: Long): DiagramPL {
        return convert(diagramRepository.findById(id).get(), diagramConfigRepository)
    }

    override fun create(diagramPL: DiagramPL): Long? {
        diagramPL.id = null // id should be null because it will be generated by the database

        val diagram = diagramRepository.save(convert(diagramPL))
        diagramHistoryService.saveDiagramAsHistoryEntry(diagram, DiagramSaveType.CREATE.name)
        return diagram.id
    }


    override fun update(id: Long, diagramPL: DiagramPL): DiagramPL {
        var diagram = diagramRepository.findById(id).get()
        val diagramChanged = convert(diagramPL)
        diagram.name = diagramChanged.name
        diagram.configId = diagramChanged.configId
        diagram.categoryId = diagramChanged.categoryId
        diagram.connections = diagramChanged.connections
        diagram.entities = diagramChanged.entities

        diagram=diagramRepository.save(diagram)

        diagramHistoryService.saveDiagramAsHistoryEntry(diagram, diagramPL.diagramSaveType?.name ?: DiagramSaveType.MANUAL.name)

        return convert(diagram, diagramConfigRepository)
    }

    override fun delete(id: Long): DiagramPL {
        val diagram = diagramRepository.findById(id).get()
        diagramHistoryService.saveDiagramAsHistoryEntry(diagram, DiagramSaveType.DELETE.name)
        diagramRepository.delete(diagram)
        return convert(diagram, diagramConfigRepository)
    }

    override fun getAllByCategoryId(id: Long): List<DiagramPL> {
        return diagramRepository.findAllByCategoryId(id).map { convert(it, diagramConfigRepository) }
    }

    override fun getByUserId(userId: Long): List<DiagramPL> {
        return diagramRepository.findAllByOwnerId(userId).map { convert(it, diagramConfigRepository) }
    }

    fun findAll():List<Diagram>{
        return diagramRepository.findAll()
    }

    fun update(diagram: Diagram){
        diagramRepository.save(diagram)
    }

    companion object {

        fun convert(diagram: Diagram, configRepository: DiagramConfigRepository): DiagramPL {

            return DiagramPL(
                diagram.id,
                diagram.ownerId,
                diagram.name,
                diagram.configId?.let { configRepository.getReferenceById(it) } ?: DiagramConfig(),
                parseEntities(diagram.entities),
                parseConnections(diagram.connections),
                diagram.categoryId ?: 0//Default Category is 0
            )
        }

        private fun parseConnections(connections: String?): List<Connection> {
            return Json.mapper().readValue(connections, Array<Connection>::class.java).toList()

        }

        private fun parseEntities(entities: String?): List<Entity> {
            return Json.mapper().readValue(entities, Array<Entity>::class.java).toList()
        }

        fun convert(diagramPL: DiagramPL): Diagram {
            val diagram = Diagram()
            diagram.id = diagramPL.id
            diagram.name = diagramPL.name
            diagram.ownerId = diagramPL.ownerId
            diagram.entities = Json.mapper().writeValueAsString(diagramPL.entities)
            diagram.connections = Json.mapper().writeValueAsString(diagramPL.connections)
            diagram.categoryId = diagramPL.categoryId ?: 0
            return diagram
        }

    }


}